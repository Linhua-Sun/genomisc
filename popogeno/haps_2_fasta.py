#! /usr/bin/python

import sys
import argparse
import os.path
import re

parser = argparse.ArgumentParser(description='produce fasta file from *.haps and *.sample files generated by shape-it')
parser.add_argument('in_haps', metavar='*.haps', help='*.haps file produced by shape-it; we expect a *.sample file with the same prefix in the same location')
#parser.add_argument("-i", "--in_haps", metavar='<hapsfile>', help='*.haps file produced by shape-it')
#parser.add_argument("--in_sample", metavar='<samplefile>', help='*.sample file produced by shape-it; if not provided the *.sample file will be expected to be present in the same location as the *.haps file.')
args = parser.parse_args()

if not os.path.isfile(args.in_haps):
	print "provide path to valid haps file"
	sys.exit(0)
else:
	if re.search("haps$", args.in_haps):
		sample_file=args.in_haps.replace('haps', "sample", -1)
#		print sample_file
		if not os.path.isfile(sample_file):
			print "we expect a sample file with name '%s' in the same location as the haps file" % sample_file
			sys.exit(0)
	else:
		print "expecting haps file to end in *.haps" 

IDs=[]
for i, line in enumerate(open(sample_file,"r")):
	if i > 1:
		line = line.strip()
		IDs.append('>'+line.split(" ")[0]+'_A\n')
		IDs.append('>'+line.split(" ")[0]+'_B\n')

sample = [line.strip() for line in open(args.in_haps)]
for line in sample:
	current=line.replace(" ", ",") #line.strip()
	columns = current.split(",")

	alleles = {}
	alleles['0'] = columns[3]
	if not columns[4]==".":
		alleles['1'] = columns[4]
	else:
		alleles['1'] = columns[3]

	for i,state in enumerate(columns[5:]):
		IDs[i]+=alleles[state]
#		print IDs[i]

for sample in IDs:
	print sample
